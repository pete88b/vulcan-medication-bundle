# AUTOGENERATED! DO NOT EDIT! File to edit: 10_per_patient.ipynb (unless otherwise specified).

__all__ = ['create_single_patient_medication_bundle', 'save_single_patient_medication_bundle', 'handle_entry_search',
           'filter_bundle', 'medication_status_filter', 'do_not_perform_filter']

# Cell
from .core import *
from pathlib import Path
import json

# Cell
def create_single_patient_medication_bundle(api_base, patient_id):
    "Return a Bundle containing one Patient and any number of MedicationX resources"
    result = new_bundle()
    references = []
    for resource_type, url_suffix in [
            ['Patient', f'?_id={patient_id}'],
            ['MedicationRequest', f'?subject={patient_id}'],
            ['MedicationDispense', f'?subject={patient_id}'],
            ['MedicationAdministration', f'?subject={patient_id}'],
            ['MedicationStatement', f'?subject={patient_id}']]:
        single_resource_bundle = get_bundle_as_raw_json(api_base, resource_type, url_suffix)
        while single_resource_bundle is not None and single_resource_bundle['total'] > 0:
            result['entry'].extend(single_resource_bundle['entry'])
            references.extend(extract_references(single_resource_bundle, ['medicationReference', 'reasonReference']))
            single_resource_bundle = get_next_bundle_as_raw_json(single_resource_bundle)
    for reference in set(references):
        result['entry'].extend(get_by_reference(api_base, reference))
    return result

# Cell
def save_single_patient_medication_bundle(bundle):
    "Write a patient medication bundle to file."
    Path('data').mkdir(exist_ok=True)
    patient = bundle['entry'][0]['resource']
    if patient['resourceType'] != 'Patient':
        raise Exception(f'expected a patient but found {patient}')
    patient_id = patient['id']
    f_name = f'data/patient_medication_bundle_{patient_id}.json'
    with open(f_name, 'w') as f:
        json.dump(bundle, f, indent=2)
    print('Bundle saved to', f_name)

# Cell
def handle_entry_search(bundle):
    "Remove `search` elements from each `entry`"
    for entry in bundle['entry']:
        if 'search' in entry: del entry['search']
    return bundle

# Cell
def filter_bundle(bundle, filter_fn):
    "Apply a filter function to a bundle in-place"
    bundle['entry'] = [e for e in bundle['entry'] if filter_fn(e)]
    return bundle

# Cell
def medication_status_filter(entry):
    "Remove medications if the status tells us the medication was not or will not be taken"
    statuses_to_remove_map = dict(
        MedicationRequest=['cancelled','stopped','draft'],
        MedicationDispense=['preparation','in-progress','cancelled','entered-in-error','stopped','declined'],
        MedicationAdministration=['not-done','entered-in-error'],
        MedicationStatement=['not-taken'])
    resource = entry.get('resource', {})
    resourceType, status = resource.get('resourceType'), resource.get('status')
    statuses_to_remove = statuses_to_remove_map.get(resourceType)
    if statuses_to_remove is not None and status in statuses_to_remove:
        print('Removing', resourceType, 'with status', status)
        return False
    return True

# Cell
def do_not_perform_filter(entry):
    "Remove medications that have the `doNotPerform` flag set to true"
    resource = entry.get('resource', {})
    if resource.get('doNotPerform', False):
        print('Removing', resource.get('resourceType'), 'with doNotPerform = true')
        return False
    return True